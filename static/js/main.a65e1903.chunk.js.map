{"version":3,"sources":["components/Navbar/Navbar.module.scss","redux/dialogs-reducer.ts","redux/users-reducer.ts","components/Profile/MyPosts/Post/Post.module.scss","api/api.ts","components/Profile/ProfileInfo/ProfileInfo.module.scss","reportWebVitals.ts","components/Friends/Friends.tsx","components/Settings/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/Header-container.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","redux/auth-reducer.ts","components/Profile/MyPosts/MyPosts.module.scss","images/preloader.svg","components/common/Preloader/Preloader.tsx","utils/validators/validators.tsx","components/common/FormsControls/FormsControls.module.scss","components/Header/Header.module.scss","components/common/FormsControls/FormsControls.tsx","images/userPhoto.png"],"names":["module","exports","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","newMessage","Date","getTime","addMessage","items","pageSize","currentPage","totalCount","isFetching","startPage","followingInProgress","UsersReducer","map","u","userId","followed","users","pageNumber","isFollowing","filter","followUser","unFollowUser","changeCurrentPage","toggleIsFetching","toggleIsFollowingProgress","changeStartPage","requestUsers","dispatch","a","usersAPI","getUsers","response","data","follow","resultCode","unFollow","instance","axios","create","withCredentials","baseURL","headers","get","delete","post","authAPI","me","login","email","password","rememberMe","logout","profileAPI","getProfileUser","getUserStatus","updateUserStatus","status","put","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Friends","className","s","title","Settings","props","News","Music","Navbar","nav","item","to","activeClassName","activeLink","active","tab_friend","title_friend","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateStatusUser","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","autoFocus","onBlur","onChange","onDoubleClick","React","Component","ProfileStatusWithHooks","useState","setEditMode","setStatus","useEffect","ProfileInfo","profile","profile_information_container","ava_container","alt","src","photos","small","userPhoto","user_name","fullName","user_information","lookingForAJob","contacts","facebook","Preloader","posts","likesCount","setUserStatus","Post","maxLength30","maxLengthCreator","AddPostReduxForm","reduxForm","form","Form","onSubmit","handleSubmit","Field","input_news","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","profilePage","addPost","postMessage","postsElements","p","posts_container","title_posts","Profile","ProfileContainer","match","params","authorizedUserId","toString","history","push","getStatusUser","compose","isAuth","auth","withRouter","Header","header","loginBlock","onClick","HeaderContainer","initialized","rootReducer","combineReducers","newPost","postId","dialogsPage","sidebar","usersPage","AuthReducer","formReducer","app","store","createStore","applyMiddleware","thunk","DialogsContainer","lazy","UsersContainer","Login","App","initializeApp","fallback","path","render","AppContainer","getAuthUser","SocialNetworkApp","ReactDOM","StrictMode","document","getElementById","payload","setAuthUserData","length","stopSubmit","_error","preloader","maxLength","FormControl","meta","error","touched","children","hasError","formControl","input","restProps","Input"],"mappings":"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","file":"static/js/main.a65e1903.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3cPQl\",\"item\":\"Navbar_item__1qTnH\",\"activeLink\":\"Navbar_activeLink__1bbTB\",\"tab_friend\":\"Navbar_tab_friend__2JyUZ\",\"title_friend\":\"Navbar_title_friend__1nula\"};","export let initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: '1', name: 'Vania'},\r\n        {id: '2', name: 'Andrey'},\r\n        {id: '3', name: 'Sveta'},\r\n        {id: '4', name: 'Sasha'},\r\n        {id: '5', name: 'Victor'},\r\n        {id: '6', name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: DialogsActionsTypes): DialogsPageType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-MESSAGE':\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.message\r\n            }\r\n            return {...state, messages: [...state.messages, newMessage]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const addMessage = (message: string) => {\r\n    return {\r\n        type: 'DIALOGS/ADD-MESSAGE',\r\n        message\r\n    } as const\r\n}\r\n\r\n//types\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\nexport type DialogsActionsTypes = addMessageActionType\r\nexport type addMessageActionType = ReturnType<typeof addMessage>\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {AppThunkType} from \"./redux-store\";\r\n\r\nlet initialState: UsersPageType = {\r\n    items: [],\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    totalCount: 0,\r\n    isFetching: true,\r\n    startPage: 1,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const UsersReducer = (state: UsersPageType = initialState, action: UserActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case \"USERS/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case \"USERS/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case \"USERS/SET-USERS\":\r\n            return {...state, items: action.users}\r\n        case \"USERS/SET-TOTAL-USERS-COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n        case \"USERS/CHANGE-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"CHANGE-START-PAGE\":\r\n            return {...state, startPage: action.pageNumber}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollowing\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const followUser = (userId: number) => {\r\n    return {\r\n        type: 'USERS/FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const unFollowUser = (userId: number) => {\r\n    return {\r\n        type: 'USERS/UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'USERS/SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: 'USERS/SET-TOTAL-USERS-COUNT',\r\n        totalCount\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'USERS/CHANGE-CURRENT-PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FETCHING',\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleIsFollowingProgress = (isFollowing: boolean, userId: number) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        isFollowing,\r\n        userId\r\n    } as const\r\n}\r\nexport const changeStartPage = (pageNumber: number) => {\r\n    return {\r\n        type: 'CHANGE-START-PAGE',\r\n        pageNumber\r\n    } as const\r\n}\r\n\r\n//thunksC\r\nexport const requestUsers = (currentPage: number, pageSize: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(changeCurrentPage(currentPage))\r\n\r\n    let response = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.data.items))\r\n    dispatch(setTotalUsersCount(response.data.totalCount))\r\n}\r\nexport const follow = (userId: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n\r\n    let response = await usersAPI.followUser(userId)\r\n    !response.data.resultCode && dispatch(followUser(userId))\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const unFollow = (userId: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n\r\n    let response = await usersAPI.unFollowUser(userId)\r\n    !response.data.resultCode && dispatch(unFollowUser(userId))\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\n//types\r\ntype PhotosType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: PhotosType\r\n    status: null\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    items: Array<UserType>\r\n    pageSize: number\r\n    currentPage: number\r\n    totalCount: number\r\n    isFetching: boolean\r\n    startPage: number\r\n    followingInProgress: Array<number>\r\n}\r\nexport type UserActionsTypes = followACActionType\r\n    | unFollowACActionType\r\n    | setUsersACActionType\r\n    | setTotalUsersCountACActionType\r\n    | changeCurrentPageACActionType\r\n    | setIsFetchingType\r\n    | toggleIsFollowingProgressType\r\n    | ReturnType<typeof changeStartPage>\r\n\r\nexport type followACActionType = ReturnType<typeof followUser>\r\nexport type unFollowACActionType = ReturnType<typeof unFollowUser>\r\nexport type setUsersACActionType = ReturnType<typeof setUsers>\r\nexport type setTotalUsersCountACActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type changeCurrentPageACActionType = ReturnType<typeof changeCurrentPage>\r\nexport type setIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport type toggleIsFollowingProgressType = ReturnType<typeof toggleIsFollowingProgress>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Jbho\"};","import axios from \"axios\";\r\nimport {UsersPageType} from \"../redux/users-reducer\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '528fa1c0-cacc-47ff-ae93-32ce73ccde7f'\r\n    }\r\n})\r\n\r\ntype getAuthUserType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\ntype responseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 1) {\r\n        return instance.get<UsersPageType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n\r\n    unFollowUser(userId: number) {\r\n        return instance.delete<responseType<{}>>(`follow/${userId}`,)\r\n    },\r\n\r\n    followUser(userId: number) {\r\n        return instance.post<responseType<{id: number, email: string, login: string}>>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<getAuthUserType>('auth/me')\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<responseType<{userId: number}>>('auth/login', {email, password, rememberMe})\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileUser(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n\r\n    getUserStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n\r\n    updateUserStatus(status: string) {\r\n        return instance.put('profile/status', {status})\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_information_container\":\"ProfileInfo_profile_information_container__3w-RT\",\"user_name\":\"ProfileInfo_user_name__xx4kZ\",\"user_information\":\"ProfileInfo_user_information__nCY2Z\",\"ava_container\":\"ProfileInfo_ava_container__19MgN\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport s from './Friends.module.scss';\r\n\r\nexport const Friends = () => {\r\n    return (\r\n        <div>\r\n            <h4 className={s.title}>Friends</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './Settings.module.css';\r\n\r\nexport const Settings = (props: any) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './News.module.scss';\r\n\r\nexport const News = (props: any) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './Music.module.scss';\r\n\r\nexport const Music = (props: any) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.tab_friend}`}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink} className={s.title_friend}>Friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    status: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    updateStatusUser: (status: string) => void\r\n}\r\nexport type OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport class ProfileStatus extends React.Component<OwnPropsType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatusUser(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnPropsType>, prevState: Readonly<any>, snapshot?: any): void {\r\n         if (prevProps.status !== this.props.status) {\r\n             this.setState({\r\n                 status: this.props.status\r\n             })\r\n         }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <div>\r\n                {this.state.editMode ?\r\n                    <div>\r\n                        <input\r\n                            autoFocus={true}\r\n                            onBlur={this.deactivateEditMode}\r\n                            value={this.state.status}\r\n                            onChange={this.onStatusChange}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '----'}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatusUser: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusUser(status)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n                :\r\n\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.scss';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"../ProfileStatus/ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../images/userPhoto.png\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatusUser: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatusUser}: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile_information_container}>\r\n            <div className={s.ava_container}>\r\n                <img alt={'user avatar'} src={profile.photos.small !== null ? profile.photos.small : userPhoto} />\r\n            </div>\r\n\r\n            <div>\r\n                <p className={s.user_name}>{profile.fullName}</p>\r\n                <div>\r\n                    <ProfileStatus status={status} updateStatusUser={updateStatusUser}/>\r\n                    <ProfileStatusWithHooks status={status} updateStatusUser={updateStatusUser}/>\r\n                </div>\r\n                <p className={s.user_information}>Data of Birth: 7 october</p>\r\n                <p className={s.user_information}>City: Brest</p>\r\n                <p className={s.user_information}>{profile.lookingForAJob ? 'Looking for a job' : 'Don\\'t looking for a job'}</p>\r\n                <p className={s.user_information}>Education: GGTU'15</p>\r\n                <p className={s.user_information}>Web Site: {profile.contacts.facebook}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {profileAPI} from \"../api/api\";\r\nimport {AppThunkType} from \"./redux-store\";\r\n\r\nexport let initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 3},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 12},\r\n        {id: 3, message: 'It\\'s my second post', likesCount: 1},\r\n        {id: 4, message: 'It\\'s my third post', likesCount: 3}\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postMessage,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        case \"PROFILE/SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"PROFILE/SET-USER-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"PROFILE/DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const addPost = (postMessage: string) => {\r\n    return {\r\n        type: 'PROFILE/ADD-POST',\r\n        postMessage\r\n    } as const\r\n}\r\nexport const deletePost = (postId: number) => {\r\n    return {\r\n        type: 'PROFILE/DELETE-POST',\r\n        postId\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'PROFILE/SET-USER-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: 'PROFILE/SET-USER-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const getProfileUser = (userId: string): AppThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getProfileUser(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatusUser = (userId: string): AppThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getUserStatus(userId)\r\n    dispatch(setUserStatus(response.data))\r\n}\r\nexport const updateStatusUser = (status: string): AppThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateUserStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\n\r\n//types\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ProfileContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: ProfilePhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileType\r\n    status: string\r\n}\r\nexport type ProfileActionsTypes = AddPostActionType\r\n    | setUserProfileType\r\n    | setUserStatusType\r\n    | deletePostActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type deletePostActionType = ReturnType<typeof deletePost>\r\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\r\nexport type setUserStatusType = ReturnType<typeof setUserStatus>","import React from \"react\";\r\nimport s from './Post.module.scss'\r\n\r\nexport type propsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: propsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt={'img-post'} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Mr._Bean_2011.jpg/280px-Mr._Bean_2011.jpg\" />\r\n            {props.message}\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n","import {reduxForm, Field, Form, InjectedFormProps} from \"redux-form\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type addPostFormType = {\r\n    postMessage: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(20)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<addPostFormType>> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.input_news}\r\n                    component={Textarea}\r\n                    name={'postMessage'}\r\n                    placeholder={'post message'}\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<addPostFormType>({form: 'addPostForm'})(AddPostForm)\r\n","import React from \"react\";\r\nimport {addPost, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (postMessage: string) => void,\r\n}\r\n\r\nexport type MyPostsType = MapStatePropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost}) (MyPosts)\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.scss';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {addPostFormType, AddPostReduxForm} from \"./AddPostForm\";\r\n\r\nexport const MyPosts = (props: MyPostsType) => {\r\n    const postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount}/>)\r\n\r\n    const addPostMessage = (value: addPostFormType) => {\r\n        props.addPost(value.postMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts_container}>\r\n            <h3 className={s.title_posts}>My posts</h3>\r\n\r\n            <AddPostReduxForm onSubmit={addPostMessage}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {OwnPropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\nexport const Profile = (props: OwnPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatusUser={props.updateStatusUser}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getProfileUser, getStatusUser, ProfileType, updateStatusUser} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfileUser: (userId: string) => void\r\n    getStatusUser: (userId: string) => void\r\n    updateStatusUser: (status: string) => void\r\n}\r\n\r\nexport type OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType, any> {\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : this.props.history.push('/login')\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getStatusUser(userId)\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusUser={this.props.updateStatusUser}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n }\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfileUser,\r\n        getStatusUser,\r\n        updateStatusUser\r\n    }),\r\n    withRouter\r\n)\r\n(ProfileContainer)","import React from \"react\";\r\nimport s from './Header.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img alt={'logo'} src='https://www.logodesign.net/images/nature-logo.png' />\r\n\r\n            <div className={s.loginBlock}>\r\n                {   props.isAuth\r\n                    ? <div>\r\n                        {props.login} -\r\n                        <button onClick={props.logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<OwnPropsType, any> {\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Header\r\n                isAuth = {this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n                 />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {logout})\r\n)\r\n(HeaderContainer)\r\n","import {AppThunkType} from \"./redux-store\";\r\nimport {getAuthUser} from \"./auth-reducer\";\r\n\r\nlet initialState: AppInitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: AppInitialStateType = initialState, action: AppActionsTypes): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET_INITIALIZED_DATA\":\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setInitializedData = () => {\r\n    return {\r\n        type: 'APP/SET_INITIALIZED_DATA'\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const initializeApp = (): AppThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUser())\r\n\r\n    promise.then(() => {\r\n        dispatch(setInitializedData())\r\n    })\r\n}\r\n\r\n//types\r\nexport type AppInitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionsTypes = setInitializedDataType\r\nexport type setInitializedDataType = ReturnType<typeof setInitializedData>","type SidebarType = {}\r\n\r\nexport type SidebarActionsTypes = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: SidebarActionsTypes) => {\r\n    return state\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {DialogsActionsTypes, dialogsReducer} from \"./dialogs-reducer\";\r\nimport {ProfileActionsTypes, profileReducer} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {UserActionsTypes, UsersReducer} from \"./users-reducer\";\r\nimport {AuthActionsTypes, AuthReducer} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport {AppActionsTypes, AppReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    form: formReducer,\r\n    app: AppReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype AppActionsType = AuthActionsTypes\r\n    | DialogsActionsTypes\r\n    | ProfileActionsTypes\r\n    | UserActionsTypes\r\n    | FormAction\r\n    | AppActionsTypes\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {HashRouter, Route} from 'react-router-dom';\nimport {Friends} from \"./components/Friends/Friends\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/Header-container\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {AppStateType, store} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\nimport {Suspense} from 'react';\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\nconst Login = React.lazy(() => import('./components/Login/Login'))\n\ntype MapDispatchPropsType = {\n    initializeApp: () => void\n}\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\n\ntype OwnPropsType = MapDispatchPropsType & MapStatePropsType\n\nexport class App extends Component<OwnPropsType, any> {\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render(): React.ReactNode {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className=\"app-wrapper-content\">\n                    <Suspense fallback={<Preloader />}>\n                        <Route path={\"/dialogs\"} render={() => <DialogsContainer/>}/>\n                        <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer/>}/>\n                        <Route path={\"/users\"} render={() => <UsersContainer/>}/>\n                        <Route path={\"/music\"} render={() => <Music/>}/>\n                        <Route path={\"/news\"} render={() => <News/>}/>\n                        <Route path={\"/settings\"} render={() => <Settings/>}/>\n                        <Route path={\"/friends\"} render={() => <Friends/>}/>\n                        <Route path={\"/login\"} render={() => <Login/>}/>\n                    </Suspense>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nconst AppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter\n)(App)\n\n\nexport const SocialNetworkApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {SocialNetworkApp} from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <SocialNetworkApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunkType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState: AuthType = {\r\n    resultCode: 0,\r\n    messages: [],\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nexport const AuthReducer = (state: AuthType = initialState, action: AuthActionsTypes): AuthType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'AUTH/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const getAuthUser = (): any => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUser())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type AuthType = {\r\n    resultCode: number\r\n    messages: []\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\nexport type AuthActionsTypes = setUserDataType\r\nexport type setUserDataType = ReturnType<typeof setAuthUserData>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_container\":\"MyPosts_posts_container__2N6rl\",\"title_posts\":\"MyPosts_title_posts__2t4pq\",\"input_news\":\"MyPosts_input_news__2IJAu\"};","export default __webpack_public_path__ + \"static/media/preloader.15634106.svg\";","import React from \"react\";\r\nimport preloader from \"../../../images/preloader.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={'preloader'} src={preloader} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n\r\n    return  'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2cpQF\",\"error\":\"FormsControls_error__3gzUc\",\"formSummaryError\":\"FormsControls_formSummaryError__1yNyJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__18STJ\",\"loginBlock\":\"Header_loginBlock__2I1Qx\"};","import React from \"react\"\r\nimport s from './FormsControls.module.scss'\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {error, touched}, children, ...props}) => {\r\n    const hasError = error && touched\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError && s.error}`}>\r\n            {children}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/userPhoto.22c31152.png\";"],"sourceRoot":""}