{"version":3,"sources":["redux/users-reducer.ts","images/userPhoto.png","components/Navbar/Navbar.module.scss","components/Profile/MyPosts/Post/Post.module.scss","api/api.ts","reportWebVitals.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Friends/Friends.tsx","components/Settings/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/Header-container.tsx","App.tsx","SocialNetworkApp.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","utils/validators/validators.tsx","redux/auth-reducer.ts","components/Profile/MyPosts/MyPosts.module.scss","components/common/FormsControls/FormsControls.module.scss","images/preloader.svg","components/common/Preloader/Preloader.tsx","components/Header/Header.module.scss","redux/dialogs-reducer.ts"],"names":["initialState","items","pageSize","currentPage","totalCount","isFetching","startPage","followingInProgress","UsersReducer","state","action","type","map","u","id","userId","followed","users","pageNumber","isFollowing","filter","followUser","unFollowUser","changeCurrentPage","toggleIsFetching","toggleIsFollowingProgress","changeStartPage","requestUsers","dispatch","a","usersAPI","getUsers","response","data","follow","resultCode","unFollow","module","exports","instance","axios","create","withCredentials","baseURL","headers","get","delete","post","authAPI","me","login","email","password","rememberMe","captcha","logout","profileAPI","getProfileUser","getUserStatus","updateUserStatus","status","put","savePhoto","image","formData","FormData","append","saveProfile","profile","securityAPI","getCaptchaUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","posts","message","likesCount","setUserStatus","savePhotoSuccess","initialized","rootReducer","combineReducers","profilePage","newPost","Date","getTime","postMessage","p","postId","photos","small","dialogsPage","dialogsReducer","sidebar","usersPage","auth","AuthReducer","form","formReducer","app","store","createStore","applyMiddleware","thunk","Friends","className","s","title","Settings","props","News","Music","Navbar","nav","item","to","activeClassName","activeLink","active","tab_friend","title_friend","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateStatusUser","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","autoFocus","onBlur","onChange","onDoubleClick","React","Component","ProfileData","isOwner","goToEditMode","onClick","user_name","fullName","lookingForAJob","user_information","aboutMe","lookingForAJobDescription","contacts","facebook","Object","keys","key","ProfileDataFormReduxForm","reduxForm","handleSubmit","error","Form","onSubmit","formSummaryError","Field","placeholder","name","component","Input","validate","required","Textarea","ProfileInfo","useState","setEditMode","Preloader","profile_information_container","ava_container","alt","src","userPhoto","target","files","length","initialValues","Post","maxLength30","maxLengthCreator","AddPostReduxForm","input_news","MyPostsContainer","connect","addPost","postsElements","posts_container","title_posts","Profile","ProfileContainer","match","params","authorizedUserId","toString","history","push","getStatusUser","refreshProfile","compose","isAuth","getState","startUserId","undefined","filedError","messages","split","correctFieldError","substring","toLowerCase","stopSubmit","_error","Promise","reject","withRouter","Header","header","loginBlock","HeaderContainer","DialogsContainer","lazy","UsersContainer","Login","App","initializeApp","fallback","exact","path","render","AppContainer","getAuthUser","SocialNetworkApp","ReactDOM","StrictMode","document","getElementById","FormControl","meta","touched","children","hasError","formControl","input","restProps","maxLength","captchaUrl","payload","setAuthUserData","getCaptchaUrlSuccess","url","preloader","dialogs","newMessage","addMessage"],"mappings":"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","file":"static/js/main.1e223705.chunk.js","sourcesContent":["import {usersAPI} from \"../api/api\";\r\nimport {AppThunkType} from \"./redux-store\";\r\n\r\nlet initialState: UsersPageType = {\r\n    items: [],\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    totalCount: 0,\r\n    isFetching: true,\r\n    startPage: 1,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const UsersReducer = (state: UsersPageType = initialState, action: UserActionsTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case \"USERS/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case \"USERS/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case \"USERS/SET-USERS\":\r\n            return {...state, items: action.users}\r\n        case \"USERS/SET-TOTAL-USERS-COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n        case \"USERS/CHANGE-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"CHANGE-START-PAGE\":\r\n            return {...state, startPage: action.pageNumber}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollowing\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const followUser = (userId: number) => {\r\n    return {\r\n        type: 'USERS/FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const unFollowUser = (userId: number) => {\r\n    return {\r\n        type: 'USERS/UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'USERS/SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: 'USERS/SET-TOTAL-USERS-COUNT',\r\n        totalCount\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'USERS/CHANGE-CURRENT-PAGE',\r\n        currentPage\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FETCHING',\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleIsFollowingProgress = (isFollowing: boolean, userId: number) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        isFollowing,\r\n        userId\r\n    } as const\r\n}\r\nexport const changeStartPage = (pageNumber: number) => {\r\n    return {\r\n        type: 'CHANGE-START-PAGE',\r\n        pageNumber\r\n    } as const\r\n}\r\n\r\n//thunksC\r\nexport const requestUsers = (currentPage: number, pageSize: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(changeCurrentPage(currentPage))\r\n\r\n    const response = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.data.items))\r\n    dispatch(setTotalUsersCount(response.data.totalCount))\r\n}\r\nexport const follow = (userId: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n\r\n    const response = await usersAPI.followUser(userId)\r\n    !response.data.resultCode && dispatch(followUser(userId))\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const unFollow = (userId: number): AppThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n\r\n    const response = await usersAPI.unFollowUser(userId)\r\n    !response.data.resultCode && dispatch(unFollowUser(userId))\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\n//types\r\ntype PhotosType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: PhotosType\r\n    status: null\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    items: Array<UserType>\r\n    pageSize: number\r\n    currentPage: number\r\n    totalCount: number\r\n    isFetching: boolean\r\n    startPage: number\r\n    followingInProgress: Array<number>\r\n}\r\nexport type UserActionsTypes = ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof changeCurrentPage>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n    | ReturnType<typeof changeStartPage>\r\n","export default __webpack_public_path__ + \"static/media/userPhoto.22c31152.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3cPQl\",\"item\":\"Navbar_item__1qTnH\",\"activeLink\":\"Navbar_activeLink__1bbTB\",\"tab_friend\":\"Navbar_tab_friend__2JyUZ\",\"title_friend\":\"Navbar_title_friend__1nula\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Jbho\"};","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '528fa1c0-cacc-47ff-ae93-32ce73ccde7f'\r\n    }\r\n})\r\n\r\ntype genericDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype responseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 1) {\r\n        return instance.get<responseType<genericDataType>>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    unFollowUser(userId: number) {\r\n        return instance.delete<responseType<{}>>(`follow/${userId}`,)\r\n    },\r\n    followUser(userId: number) {\r\n        return instance.post<responseType<genericDataType>>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<responseType<genericDataType>>('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<responseType<{userId: number}>>('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<responseType<{}>>('auth/login')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileUser(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getUserStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateUserStatus(status: string) {\r\n        return instance.put<responseType<{}>>('profile/status', {status})\r\n    },\r\n    savePhoto(image: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n\r\n        return instance.put<responseType<{photos: {small: string, large: string}}>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<responseType<{}>>('profile', profile)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{url: string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {profileAPI} from \"../api/api\";\r\nimport {AppThunkType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport let initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 3},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 12},\r\n        {id: 3, message: 'It\\'s my second post', likesCount: 1},\r\n        {id: 4, message: 'It\\'s my third post', likesCount: 3}\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postMessage,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        case \"PROFILE/SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"PROFILE/SET-USER-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"PROFILE/DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        case \"PROFILE/SET-USER-AVATAR\":\r\n            return state.profile !== null\r\n                ? {...state, profile: {...state.profile, photos: {...state.profile.photos, small: action.image}}}\r\n                : {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const addPost = (postMessage: string) => {\r\n    return {\r\n        type: 'PROFILE/ADD-POST',\r\n        postMessage\r\n    } as const\r\n}\r\nexport const deletePost = (postId: number) => {\r\n    return {\r\n        type: 'PROFILE/DELETE-POST',\r\n        postId\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'PROFILE/SET-USER-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: 'PROFILE/SET-USER-STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (image: string) => {\r\n    return {\r\n        type: 'PROFILE/SET-USER-AVATAR',\r\n        image\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const getProfileUser = (userId: string): AppThunkType => async (dispatch) => {\r\n    const response = await profileAPI.getProfileUser(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatusUser = (userId: string): AppThunkType => async (dispatch) => {\r\n    const response = await profileAPI.getUserStatus(userId)\r\n    dispatch(setUserStatus(response.data))\r\n}\r\nexport const updateStatusUser = (status: string): AppThunkType => async (dispatch) => {\r\n    const response = await profileAPI.updateUserStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (image: File): AppThunkType => async (dispatch) => {\r\n    const response = await profileAPI.savePhoto(image)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos.small))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): AppThunkType => async (dispatch, getState) => {\r\n    const startUserId = getState().auth.id?.toString()\r\n    const userId = startUserId !== undefined ? startUserId : '1'\r\n\r\n    const response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getProfileUser(userId))\r\n    } else {\r\n        const filedError = response.data.messages[0].split('Contacts->')[1]\r\n        const correctFieldError = filedError.substring(0, filedError.length - 1).toLowerCase()\r\n\r\n        dispatch(stopSubmit('edit-profile', {_error: correctFieldError}))\r\n        return Promise.reject(`Incorrect field: ${correctFieldError}`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ProfileContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: ProfilePhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type ProfileActionsTypes = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n","type SidebarType = {}\r\n\r\nexport type SidebarActionsTypes = {}\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: SidebarActionsTypes) => {\r\n    return state\r\n}\r\n","import {AppThunkType} from \"./redux-store\";\r\nimport {getAuthUser} from \"./auth-reducer\";\r\n\r\nlet initialState: AppInitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: AppInitialStateType = initialState, action: AppActionsTypes): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET_INITIALIZED_DATA\":\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setInitializedData = () => {\r\n    return {\r\n        type: 'APP/SET_INITIALIZED_DATA'\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const initializeApp = (): AppThunkType => (dispatch) => {\r\n    const promise = dispatch(getAuthUser())\r\n\r\n    promise.then(() => {\r\n        dispatch(setInitializedData())\r\n    })\r\n}\r\n\r\n//types\r\nexport type AppInitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionsTypes = setInitializedDataType\r\nexport type setInitializedDataType = ReturnType<typeof setInitializedData>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {DialogsActionsTypes, dialogsReducer} from \"./dialogs-reducer\";\r\nimport {ProfileActionsTypes, profileReducer} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {UserActionsTypes, UsersReducer} from \"./users-reducer\";\r\nimport {AuthActionsTypes, AuthReducer} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport {AppActionsTypes, AppReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    form: formReducer,\r\n    app: AppReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype AppActionsType = AuthActionsTypes\r\n    | DialogsActionsTypes\r\n    | ProfileActionsTypes\r\n    | UserActionsTypes\r\n    | FormAction\r\n    | AppActionsTypes\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Friends.module.scss';\r\n\r\nexport const Friends = () => {\r\n    return (\r\n        <div>\r\n            <h4 className={s.title}>Friends</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './Settings.module.css';\r\n\r\nexport const Settings = (props: any) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './News.module.scss';\r\n\r\nexport const News = (props: any) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import s from './Music.module.scss';\r\n\r\nexport const Music = (props: any) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.tab_friend}`}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink} className={s.title_friend}>Friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    status: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    updateStatusUser: (status: string) => void\r\n}\r\nexport type OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport class ProfileStatus extends React.Component<OwnPropsType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatusUser(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnPropsType>, prevState: Readonly<any>, snapshot?: any): void {\r\n         if (prevProps.status !== this.props.status) {\r\n             this.setState({\r\n                 status: this.props.status\r\n             })\r\n         }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <div>\r\n                {this.state.editMode ?\r\n                    <div>\r\n                        <input\r\n                            autoFocus={true}\r\n                            onBlur={this.deactivateEditMode}\r\n                            value={this.state.status}\r\n                            onChange={this.onStatusChange}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '----'}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {ProfileContactsType, ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport s from \"../ProfileInfo.module.scss\";\r\nimport {ProfileStatus} from \"../../ProfileStatus/ProfileStatus\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatusUser: (status: string) => void\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = ({profile, status, updateStatusUser, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n\r\n            <p className={s.user_name}><b>Full name: </b>{profile.fullName}</p>\r\n            <div>\r\n                <ProfileStatus status={status} updateStatusUser={updateStatusUser}/>\r\n            </div>\r\n            <p><b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n            <p className={s.user_information}><b>About me: </b>{profile.aboutMe}</p>\r\n            <p className={s.user_information}><b>My professional\r\n                skills: </b>{profile.lookingForAJobDescription}</p>\r\n            <p className={s.user_information}>Web Site: {profile.contacts.facebook}</p>\r\n            <div>\r\n                <b>Contacts</b>\r\n                {Object\r\n                    .keys(profile.contacts)\r\n                    .map(key => {\r\n                return <div key={key}>\r\n                    <p>{key}:</p><p>{profile.contacts[key as keyof ProfileContactsType]}</p>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\nimport s from \"../../../common/FormsControls/FormsControls.module.scss\";\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = ({handleSubmit, error, profile}) => {\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {   error &&\r\n            <div className={s.formSummaryError}>\r\n                Incorrect field: {error}\r\n            </div>\r\n            }\r\n\r\n            <div><b>Full name: </b>\r\n                <Field\r\n                    placeholder={'full name'}\r\n                    name={'fullName'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div><b>Looking for a job: </b>\r\n                <Field\r\n                    name={'lookingForAJob'}\r\n                    type={'checkbox'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div><b>My professional skills:</b>\r\n                <Field\r\n                    placeholder={'My professional skills'}\r\n                    name={'lookingForAJobDescription'}\r\n                    component={Textarea}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div><b>About me:</b>\r\n                <Field\r\n                    placeholder={'About me'}\r\n                    name={'AboutMe'}\r\n                    component={Textarea}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>{Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}: </b>\r\n                    <Field\r\n                        placeholder={key}\r\n                        name={`contacts.${key}`}\r\n                        component={Input}\r\n                    />\r\n                </div>\r\n            })}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.scss';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport userPhoto from \"../../../images/userPhoto.png\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatusUser: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (filePhoto: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatusUser, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileType) => {\r\n        saveProfile(profile).then(\r\n            () => setEditMode(false)\r\n        )\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile_information_container}>\r\n            <div className={s.ava_container}>\r\n                <img alt={'user avatar'} src={profile.photos ? profile.photos.small : userPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n\r\n            {editMode\r\n                ? <ProfileDataFormReduxForm\r\n                    onSubmit={onSubmit}\r\n                    profile={profile}\r\n                    initialValues={profile}\r\n                />\r\n                : <ProfileData\r\n                    profile={profile}\r\n                    status={status}\r\n                    updateStatusUser={updateStatusUser}\r\n                    isOwner={isOwner}\r\n                    goToEditMode={goToEditMode}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Post.module.scss'\r\n\r\nexport type propsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: propsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt={'img-post'} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Mr._Bean_2011.jpg/280px-Mr._Bean_2011.jpg\" />\r\n            {props.message}\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n","import {reduxForm, Field, Form, InjectedFormProps} from \"redux-form\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type addPostFormType = {\r\n    postMessage: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(20)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<addPostFormType>> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.input_news}\r\n                    component={Textarea}\r\n                    name={'postMessage'}\r\n                    placeholder={'post message'}\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<addPostFormType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (postMessage: string) => void,\r\n}\r\n\r\nexport type MyPostsType = MapStatePropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost}) (MyPosts)\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.scss';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {addPostFormType, AddPostReduxForm} from \"./AddPostForm\";\r\n\r\nexport const MyPosts = (props: MyPostsType) => {\r\n    const postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount}/>)\r\n\r\n    const addPostMessage = (value: addPostFormType) => {\r\n        props.addPost(value.postMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts_container}>\r\n            <h3 className={s.title_posts}>My posts</h3>\r\n\r\n            <AddPostReduxForm onSubmit={addPostMessage}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatusUser={props.updateStatusUser}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileUser,\r\n    getStatusUser,\r\n    savePhoto,\r\n    ProfileType,\r\n    updateStatusUser,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: null | ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfileUser: (userId: string) => void\r\n    getStatusUser: (userId: string) => void\r\n    updateStatusUser: (status: string) => void\r\n    savePhoto: (filePhoto: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType & {isOwner: boolean}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType, any> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : this.props.history.push('/login')\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getStatusUser(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<any>, snapshot?: any): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatusUser={this.props.updateStatusUser}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfileUser,\r\n        getStatusUser,\r\n        updateStatusUser,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter\r\n)\r\n(ProfileContainer)","import React from \"react\";\r\nimport s from './Header.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            {/*<img alt={'logo'} src='https://www.logodesign.net/images/nature-logo.png' />*/}\r\n\r\n            <div className={s.loginBlock}>\r\n                {   props.isAuth\r\n                    ? <div>\r\n                        {props.login} -\r\n                        <button onClick={props.logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<OwnPropsType, any> {\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Header\r\n                isAuth = {this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n                 />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {logout})\r\n)\r\n(HeaderContainer)\r\n","import React, {Component, Suspense} from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Friends} from \"./components/Friends/Friends\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/Header-container\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\nconst Login = React.lazy(() => import('./components/Login/Login'))\n\ntype MapDispatchPropsType = {\n    initializeApp: () => void\n}\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\n\ntype OwnPropsType = MapDispatchPropsType & MapStatePropsType\n\nexport class App extends Component<OwnPropsType, any> {\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render(): React.ReactNode {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className=\"app-wrapper-content\">\n                    <Suspense fallback={<Preloader/>}>\n                        <Switch>\n                            <Route exact path={\"/\"} render={() => <Redirect to={'/profile'} />}/>\n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer/>}/>\n                            <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer/>}/>\n                            <Route path={\"/users\"} render={() => <UsersContainer/>}/>\n                            <Route path={\"/music\"} render={() => <Music/>}/>\n                            <Route path={\"/news\"} render={() => <News/>}/>\n                            <Route path={\"/settings\"} render={() => <Settings/>}/>\n                            <Route path={\"/friends\"} render={() => <Friends/>}/>\n                            <Route path={\"/login\"} render={() => <Login/>}/>\n                            <Route path={\"*\"} render={() => <div>404. PAGE NOT FOUND</div>}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport const AppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter\n)(App)\n\n\n","import {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport React from \"react\";\r\nimport {AppContainer} from \"./App\";\r\n\r\nexport const SocialNetworkApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {SocialNetworkApp} from \"./SocialNetworkApp\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <SocialNetworkApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\"\r\nimport s from './FormsControls.module.scss'\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {error, touched}, children, ...props}) => {\r\n    const hasError = error && touched\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError && s.error}`}>\r\n            {children}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_information_container\":\"ProfileInfo_profile_information_container__3w-RT\",\"user_name\":\"ProfileInfo_user_name__xx4kZ\",\"user_information\":\"ProfileInfo_user_information__nCY2Z\",\"ava_container\":\"ProfileInfo_ava_container__19MgN\"};","export const required = (value: any) => {\r\n    if (value) return undefined\r\n\r\n    return  'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunkType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState: AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport const AuthReducer = (state: AuthType = initialState, action: AuthActionsTypes): AuthType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {...state, ...action.payload}\r\n        case \"AUTH/GET_CAPTCHA_URL\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'AUTH/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n}\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => {\r\n    return {\r\n        type: 'AUTH/GET_CAPTCHA_URL',\r\n        payload: {captchaUrl}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const getAuthUser = (): any => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        const {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunkType => async (dispatch) => {\r\n    const response = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUser())\r\n        dispatch(getCaptchaUrlSuccess(null))\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): AppThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n//types\r\nexport type AuthType = {\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n    captchaUrl: null | string\r\n}\r\nexport type AuthActionsTypes = ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_container\":\"MyPosts_posts_container__2N6rl\",\"title_posts\":\"MyPosts_title_posts__2t4pq\",\"input_news\":\"MyPosts_input_news__2IJAu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2cpQF\",\"error\":\"FormsControls_error__3gzUc\",\"formSummaryError\":\"FormsControls_formSummaryError__1yNyJ\"};","export default __webpack_public_path__ + \"static/media/preloader.15634106.svg\";","import React from \"react\";\r\nimport preloader from \"../../../images/preloader.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={'preloader'} src={preloader} />\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__18STJ\",\"loginBlock\":\"Header_loginBlock__2I1Qx\"};","export let initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: '1', name: 'Vania'},\r\n        {id: '2', name: 'Andrey'},\r\n        {id: '3', name: 'Sveta'},\r\n        {id: '4', name: 'Sasha'},\r\n        {id: '5', name: 'Victor'},\r\n        {id: '6', name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: DialogsActionsTypes): DialogsPageType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-MESSAGE':\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.message\r\n            }\r\n            return {...state, messages: [...state.messages, newMessage]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const addMessage = (message: string) => {\r\n    return {\r\n        type: 'DIALOGS/ADD-MESSAGE',\r\n        message\r\n    } as const\r\n}\r\n\r\n//types\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\nexport type DialogsActionsTypes = addMessageActionType\r\nexport type addMessageActionType = ReturnType<typeof addMessage>\r\n\r\n"],"sourceRoot":""}